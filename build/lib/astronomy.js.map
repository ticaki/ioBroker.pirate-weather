{
  "version": 3,
  "sources": ["../../src/lib/astronomy.ts"],
  "sourcesContent": ["import * as SunCalc from 'suncalc';\n\n/**\n * Calculate astronomy data for a given date and location\n *\n * @param date The date for which to calculate astronomy data\n * @param latitude The latitude of the location\n * @param longitude The longitude of the location\n * @returns Object with astronomy data in milliseconds\n */\nexport function calculateAstronomyData(\n    date: Date,\n    latitude: number,\n    longitude: number,\n): {\n    civilDawn: number;\n    civilDusk: number;\n    nauticalDawn: number;\n    nauticalDusk: number;\n    astronomicalDawn: number;\n    astronomicalDusk: number;\n    dayLength: number;\n    nightLength: number;\n    solarNoon: number;\n    moonrise: number | null;\n    moonset: number | null;\n    moonVisibleDuration: number | null;\n    lunarTransit: number;\n} {\n    // Get sun times for the day\n    const sunTimes = SunCalc.getTimes(date, latitude, longitude);\n    const moonTimes = SunCalc.getMoonTimes(date, latitude, longitude);\n\n    // Calculate day length (from sunrise to sunset)\n    const dayLength = sunTimes.sunset.getTime() - sunTimes.sunrise.getTime();\n\n    // Calculate night length (from sunset to next sunrise)\n    // We need to get the next day's sunrise\n    const nextDay = new Date(date);\n    nextDay.setDate(nextDay.getDate() + 1);\n    const nextSunTimes = SunCalc.getTimes(nextDay, latitude, longitude);\n    const nightLength = nextSunTimes.sunrise.getTime() - sunTimes.sunset.getTime();\n\n    // Calculate moon visible duration (from moonrise to moonset)\n    let moonVisibleDuration: number | null = null;\n    if (moonTimes.rise && moonTimes.set) {\n        // Check if moonset is after moonrise\n        if (moonTimes.set.getTime() > moonTimes.rise.getTime()) {\n            moonVisibleDuration = moonTimes.set.getTime() - moonTimes.rise.getTime();\n        } else {\n            // Moonset is before moonrise, so moon is visible from moonrise to end of day\n            // and from start of day to moonset - calculate total duration\n            const endOfDay = new Date(date);\n            endOfDay.setHours(23, 59, 59, 999);\n            const startOfDay = new Date(date);\n            startOfDay.setHours(0, 0, 0, 0);\n            moonVisibleDuration =\n                endOfDay.getTime() - moonTimes.rise.getTime() + (moonTimes.set.getTime() - startOfDay.getTime());\n        }\n    }\n\n    // Calculate lunar transit (highest point of the moon)\n    const lunarTransit = calculateLunarTransit(date, latitude, longitude);\n\n    return {\n        civilDawn: sunTimes.dawn.getTime(),\n        civilDusk: sunTimes.dusk.getTime(),\n        nauticalDawn: sunTimes.nauticalDawn.getTime(),\n        nauticalDusk: sunTimes.nauticalDusk.getTime(),\n        astronomicalDawn: sunTimes.nightEnd.getTime(),\n        astronomicalDusk: sunTimes.night.getTime(),\n        dayLength,\n        nightLength,\n        solarNoon: sunTimes.solarNoon.getTime(),\n        moonrise: moonTimes.rise ? moonTimes.rise.getTime() : null,\n        moonset: moonTimes.set ? moonTimes.set.getTime() : null,\n        moonVisibleDuration,\n        lunarTransit,\n    };\n}\n\n/**\n * Calculate lunar transit (moon highest point) using Brent's method\n * for optimization with 1-second precision\n *\n * @param date The date for which to calculate lunar transit\n * @param latitude The latitude of the location\n * @param longitude The longitude of the location\n * @returns Timestamp of lunar transit in milliseconds\n */\nfunction calculateLunarTransit(date: Date, latitude: number, longitude: number): number {\n    // Start and end of the day\n    const dayStart = new Date(date);\n    dayStart.setHours(0, 0, 0, 0);\n    const dayEnd = new Date(date);\n    dayEnd.setHours(23, 59, 59, 999);\n\n    // Brent's method parameters\n    const tolerance = 1000; // 1 second in milliseconds\n    let a = dayStart.getTime();\n    let b = dayEnd.getTime();\n\n    // Objective function: negative altitude (to find maximum, we minimize negative)\n    const getAltitude = (timestamp: number): number => {\n        const position = SunCalc.getMoonPosition(new Date(timestamp), latitude, longitude);\n        return -position.altitude; // Negative because we want to find maximum\n    };\n\n    // Golden ratio for initial search\n    const phi = (1 + Math.sqrt(5)) / 2;\n    const resphi = 2 - phi;\n\n    // Initial bracket\n    let x = a + resphi * (b - a);\n    let fx = getAltitude(x);\n\n    // Brent's method optimization\n    while (Math.abs(b - a) > tolerance) {\n        // Golden section step\n        const c = b - resphi * (b - a);\n        const fc = getAltitude(c);\n\n        if (fc < fx) {\n            b = x;\n            x = c;\n            fx = fc;\n        } else {\n            a = c;\n        }\n    }\n\n    return Math.round(x);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAyB;AAUlB,SAAS,uBACZ,MACA,UACA,WAeF;AAEE,QAAM,WAAW,QAAQ,SAAS,MAAM,UAAU,SAAS;AAC3D,QAAM,YAAY,QAAQ,aAAa,MAAM,UAAU,SAAS;AAGhE,QAAM,YAAY,SAAS,OAAO,QAAQ,IAAI,SAAS,QAAQ,QAAQ;AAIvE,QAAM,UAAU,IAAI,KAAK,IAAI;AAC7B,UAAQ,QAAQ,QAAQ,QAAQ,IAAI,CAAC;AACrC,QAAM,eAAe,QAAQ,SAAS,SAAS,UAAU,SAAS;AAClE,QAAM,cAAc,aAAa,QAAQ,QAAQ,IAAI,SAAS,OAAO,QAAQ;AAG7E,MAAI,sBAAqC;AACzC,MAAI,UAAU,QAAQ,UAAU,KAAK;AAEjC,QAAI,UAAU,IAAI,QAAQ,IAAI,UAAU,KAAK,QAAQ,GAAG;AACpD,4BAAsB,UAAU,IAAI,QAAQ,IAAI,UAAU,KAAK,QAAQ;AAAA,IAC3E,OAAO;AAGH,YAAM,WAAW,IAAI,KAAK,IAAI;AAC9B,eAAS,SAAS,IAAI,IAAI,IAAI,GAAG;AACjC,YAAM,aAAa,IAAI,KAAK,IAAI;AAChC,iBAAW,SAAS,GAAG,GAAG,GAAG,CAAC;AAC9B,4BACI,SAAS,QAAQ,IAAI,UAAU,KAAK,QAAQ,KAAK,UAAU,IAAI,QAAQ,IAAI,WAAW,QAAQ;AAAA,IACtG;AAAA,EACJ;AAGA,QAAM,eAAe,sBAAsB,MAAM,UAAU,SAAS;AAEpE,SAAO;AAAA,IACH,WAAW,SAAS,KAAK,QAAQ;AAAA,IACjC,WAAW,SAAS,KAAK,QAAQ;AAAA,IACjC,cAAc,SAAS,aAAa,QAAQ;AAAA,IAC5C,cAAc,SAAS,aAAa,QAAQ;AAAA,IAC5C,kBAAkB,SAAS,SAAS,QAAQ;AAAA,IAC5C,kBAAkB,SAAS,MAAM,QAAQ;AAAA,IACzC;AAAA,IACA;AAAA,IACA,WAAW,SAAS,UAAU,QAAQ;AAAA,IACtC,UAAU,UAAU,OAAO,UAAU,KAAK,QAAQ,IAAI;AAAA,IACtD,SAAS,UAAU,MAAM,UAAU,IAAI,QAAQ,IAAI;AAAA,IACnD;AAAA,IACA;AAAA,EACJ;AACJ;AAWA,SAAS,sBAAsB,MAAY,UAAkB,WAA2B;AAEpF,QAAM,WAAW,IAAI,KAAK,IAAI;AAC9B,WAAS,SAAS,GAAG,GAAG,GAAG,CAAC;AAC5B,QAAM,SAAS,IAAI,KAAK,IAAI;AAC5B,SAAO,SAAS,IAAI,IAAI,IAAI,GAAG;AAG/B,QAAM,YAAY;AAClB,MAAI,IAAI,SAAS,QAAQ;AACzB,MAAI,IAAI,OAAO,QAAQ;AAGvB,QAAM,cAAc,CAAC,cAA8B;AAC/C,UAAM,WAAW,QAAQ,gBAAgB,IAAI,KAAK,SAAS,GAAG,UAAU,SAAS;AACjF,WAAO,CAAC,SAAS;AAAA,EACrB;AAGA,QAAM,OAAO,IAAI,KAAK,KAAK,CAAC,KAAK;AACjC,QAAM,SAAS,IAAI;AAGnB,MAAI,IAAI,IAAI,UAAU,IAAI;AAC1B,MAAI,KAAK,YAAY,CAAC;AAGtB,SAAO,KAAK,IAAI,IAAI,CAAC,IAAI,WAAW;AAEhC,UAAM,IAAI,IAAI,UAAU,IAAI;AAC5B,UAAM,KAAK,YAAY,CAAC;AAExB,QAAI,KAAK,IAAI;AACT,UAAI;AACJ,UAAI;AACJ,WAAK;AAAA,IACT,OAAO;AACH,UAAI;AAAA,IACR;AAAA,EACJ;AAEA,SAAO,KAAK,MAAM,CAAC;AACvB;",
  "names": []
}
