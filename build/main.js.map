{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.6.5\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport 'source-map-support/register';\nimport { Library } from './lib/library';\nimport { genericStateObjects, setUnits, type PirateWeatherTestdata } from './lib/definition';\n\nclass PirateWeather extends utils.Adapter {\n    library: Library;\n    unload: boolean = false;\n    online: boolean | null = null;\n    getWeatherLoopTimeout: ioBroker.Timeout | undefined | null = null;\n    lang: string = 'en';\n\n    controller: AbortController | null = null;\n    timeoutId: ioBroker.Timeout | undefined = undefined;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'pirate-weather',\n            useFormatDate: true, // Use formatDate from utils\n        });\n        this.on('ready', this.onReady.bind(this));\n        // this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n        this.library = new Library(this, 'PirateWeather');\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        if (this.config.pollingInMinutes) {\n            if (typeof this.config.pollIntervalMinutes !== 'number' || this.config.pollIntervalMinutes < 1) {\n                this.log.warn(\n                    `Invalid poll interval in minutes: ${this.config.pollIntervalMinutes}. Using safe value of 60 minutes.`,\n                );\n                this.config.pollIntervalMinutes = 60; // Default to\n            }\n            this.config.pollIntervalMinutes = Math.ceil(this.config.pollIntervalMinutes);\n        } else {\n            if (typeof this.config.pollInterval !== 'number' || this.config.pollInterval < 1) {\n                this.log.warn(`Invalid poll interval: ${this.config.pollInterval}. Using default value of 1 hour.`);\n                this.config.pollInterval = 1; // Default to 1 minute if invalid\n            }\n            this.config.pollInterval = Math.ceil(this.config.pollInterval);\n        }\n        if (!this.config.apiToken) {\n            this.log.error('API token is not set in the adapter configuration. Please set it in the adapter settings.');\n            return;\n        }\n        if (\n            !this.config.position ||\n            typeof this.config.position !== 'string' ||\n            !this.config.position.split(',').every(coord => !isNaN(parseFloat(coord)))\n        ) {\n            this.log.error('Position is not set in the adapter configuration. Please set it in the adapter settings.');\n            return;\n        }\n        if (this.config.hours < 0 || this.config.hours > 48) {\n            this.log.warn(`Invalid hours to display: ${this.config.hours}. Using default value of 24 hours.`);\n            this.config.hours = 24; // Default to 24 hours if invalid\n        }\n        this.lang = this.language ? this.language.split('-')[0] : 'en';\n        setUnits(this.config.units);\n        await this.library.init();\n        const states = await this.getStatesAsync('*');\n        await this.library.initStates(states);\n        await this.delay(1000); // Wait for 1 second to ensure the library is fully initialized\n        await this.getPirateWeatherLoop();\n        this.log.info(\n            `Pirate Weather adapter started with position: ${this.config.position} and poll interval: ${this.config.pollingInMinutes ? `${this.config.pollIntervalMinutes} minute(s)` : `${this.config.pollInterval} hour(s)`}.`,\n        );\n    }\n\n    getPirateWeatherLoop = async (): Promise<void> => {\n        let errorState = false;\n        try {\n            if (this.getWeatherLoopTimeout) {\n                this.clearTimeout(this.getWeatherLoopTimeout);\n            }\n            await this.getData();\n            await this.setState('info.connection', true, true);\n            if (this.online !== true) {\n                this.log.debug('Pirate Weather is online');\n            }\n            this.online = true;\n        } catch (error: any) {\n            if (error.name !== 'AbortError') {\n                this.log.error(`Error in getPirateWeatherLoop: ${JSON.stringify(error)}`);\n            }\n            await this.setState('info.connection', false, true);\n            if (this.online !== false) {\n                this.log.warn('Pirate Weather is offline. Retrying in 10 minutes.');\n            }\n            this.online = false;\n            errorState = true; // Set error to true to trigger the retry logic\n        } finally {\n            if (!this.unload) {\n                let loopTime = 600000 + Date.now();\n                if (this.config.pollingInMinutes) {\n                    loopTime = new Date().setMinutes(new Date().getMinutes() + this.config.pollIntervalMinutes, 0);\n                    if (new Date(loopTime).getHours() != new Date().getHours()) {\n                        loopTime = new Date().setHours(new Date().getHours() + 1, 0, 0);\n                    }\n                } else if (!errorState) {\n                    loopTime = new Date().setHours(new Date().getHours() + this.config.pollInterval, 0, 0);\n                }\n                loopTime += 2000 + Math.ceil(Math.random() * 3000); // Add a random delay of up to 3 second + 1,5 seconds\n                this.log.debug(\n                    `Next update scheduled for: ${new Date(loopTime).toLocaleTimeString('de', { hour: '2-digit', minute: '2-digit' })}:${`00${Math.floor(loopTime / 1000) % 60}`.slice(-2)}:${`000${loopTime % 1000}`.slice(-3)}`,\n                );\n                // Schedule the next update\n\n                this.getWeatherLoopTimeout = this.setTimeout(() => {\n                    void this.getPirateWeatherLoop();\n                }, loopTime - Date.now());\n            }\n        }\n    };\n\n    getData = async (): Promise<void> => {\n        const url = `https://api.pirateweather.net/forecast/${this.config.apiToken}/${this.config.position}?units=${this.config.units || 'si'}&icon=pirate&version=2&lang=${this.lang}${\n            !this.config.minutes ? '&exclude=minutely' : ''\n        }`;\n\n        const response = await this.fetch(url);\n\n        if (this.unload) {\n            return;\n        }\n\n        if (response.status === 200) {\n            const data = (await response.json()) as PirateWeatherTestdata;\n            this.log.debug(`Data fetched successfully: ${JSON.stringify(data)}`);\n            if (data.flags) {\n                data.units = data.flags.units;\n                data['nearest-station'] = data.flags['nearest-station'];\n                data.version = data.flags.version;\n                delete data.flags;\n            }\n            if (data.hourly && data.hourly.data) {\n                if (this.config.hours > 0) {\n                    data.hourly.data = data.hourly.data.slice(0, this.config.hours);\n                } else {\n                    data.hourly.data = [];\n                }\n            }\n            for (const d of [data.hourly.data, data.daily.data, [data.currently]]) {\n                if (d && d.length) {\n                    for (let a = 0; a < d.length; a++) {\n                        d[a].windBearingText = this.library.getTranslation(this.getWindBearingText(d[a].windBearing));\n                        d[a].cloudCover = Math.round(d[a].cloudCover * 100);\n                        d[a].precipProbability = Math.round(d[a].precipProbability * 100);\n                        d[a].humidity = Math.round(d[a].humidity * 100);\n                        if (this.config.units === 'ca') {\n                            d[a].precipAccumulation = d[a].precipAccumulation\n                                ? Math.round(d[a].precipAccumulation * 10)\n                                : d[a].precipAccumulation;\n                            if (d !== data.hourly.data) {\n                                d[a].snowAccumulation = d[a].snowAccumulation\n                                    ? Math.round(d[a].snowAccumulation * 10)\n                                    : d[a].snowAccumulation;\n                                d[a].iceAccumulation = d[a].iceAccumulation\n                                    ? Math.round(d[a].iceAccumulation * 10)\n                                    : d[a].iceAccumulation;\n                                d[a].liquidAccumulation = d[a].liquidAccumulation\n                                    ? Math.round(d[a].liquidAccumulation * 10)\n                                    : d[a].liquidAccumulation;\n                            }\n                        }\n                        if (d === data.daily.data) {\n                            d[a].moonPhase = Math.round(d[a].moonPhase * 100);\n                            d[a].sunriseTime = d[a].sunriseTime * 1000; // Convert to milliseconds\n                            d[a].sunsetTime = d[a].sunsetTime * 1000; // Convert to milliseconds\n                            d[a].apparentTemperatureMinTime = d[a].apparentTemperatureMinTime * 1000; // Convert to milliseconds\n                            d[a].apparentTemperatureMaxTime = d[a].apparentTemperatureMaxTime * 1000; // Convert to milliseconds\n                            d[a].apparentTemperatureLowTime = d[a].apparentTemperatureLowTime * 1000;\n                            d[a].apparentTemperatureHighTime = d[a].apparentTemperatureHighTime * 1000; // Convert to milliseconds\n                            d[a].temperatureMinTime = d[a].temperatureMinTime * 1000; // Convert to milliseconds\n                            d[a].temperatureMaxTime = d[a].temperatureMaxTime * 1000; // Convert to milliseconds\n                            d[a].temperatureLowTime = d[a].temperatureLowTime * 1000; // Convert to milliseconds\n                            d[a].temperatureHighTime = d[a].temperatureHighTime * 1000; // Convert to milliseconds\n                            d[a].windGustTime = d[a].windGustTime * 1000; // Convert to milliseconds\n                            d[a].precipIntensityMaxTime = d[a].precipIntensityMaxTime * 1000; // Convert to milliseconds\n                            d[a].uvIndexTime = d[a].uvIndexTime * 1000;\n                        }\n                        d[a].time = d[a].time * 1000; // Convert to milliseconds\n                    }\n                }\n            }\n            if (!this.config.minutes) {\n                // Remove minute-by-minute data if not configured\n                delete data.minutely;\n            }\n            data.lastUpdate = Date.now();\n            await this.library.writeFromJson('weather', 'weather', genericStateObjects, data, true);\n        } else {\n            throw new Error({ status: response.status, statusText: response.statusText } as any);\n        }\n    };\n\n    private onUnload(callback: () => void): void {\n        try {\n            this.unload = true;\n            void this.setState('info.connection', false, true);\n            if (this.getWeatherLoopTimeout) {\n                this.clearTimeout(this.getWeatherLoopTimeout);\n            }\n            if (this.controller) {\n                this.controller.abort();\n                this.controller = null;\n            }\n            if (this.timeoutId) {\n                this.clearTimeout(this.timeoutId);\n                this.timeoutId = undefined;\n            }\n\n            callback();\n        } catch {\n            callback();\n        }\n    }\n    private getWindBearingText(windBearing: number | undefined): string {\n        if (windBearing === undefined) {\n            return '';\n        }\n        const directions = [\n            'N',\n            'NNE',\n            'NE',\n            'ENE',\n            'E',\n            'ESE',\n            'SE',\n            'SSE',\n            'S',\n            'SSW',\n            'SW',\n            'WSW',\n            'W',\n            'WNW',\n            'NW',\n            'NNW',\n        ];\n        const index = Math.round((windBearing % 360) / 22.5) % 16;\n        return directions[index];\n    }\n    async fetch(url: string, init?: RequestInit): Promise<Response> {\n        this.controller = new AbortController();\n        this.timeoutId = this.setTimeout(() => {\n            this.controller && this.controller.abort();\n            this.controller = null;\n        }, 30000); // 30 seconds timeout\n\n        try {\n            const response = await fetch(url, {\n                ...init,\n                method: init?.method ?? 'GET',\n                signal: this.controller.signal,\n            });\n\n            // Clear the timeout since the request completed\n            this.clearTimeout(this.timeoutId);\n            this.timeoutId = undefined;\n            this.controller = null;\n            return response;\n        } catch (error) {\n            this.clearTimeout(this.timeoutId);\n            this.timeoutId = undefined;\n            this.controller = null;\n            throw error;\n        }\n    }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new PirateWeather(options);\n} else {\n    // otherwise start the instance directly\n    (() => new PirateWeather())();\n}\n"],
  "mappings": "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",
  "names": []
}
